{"version":3,"sources":["image/profile.png","Pending.js","Complete.js","App.js","index.js"],"names":["module","exports","Pending","className","Complete","App","useState","currentAccount","setCurrentAccount","allHonks","setAllHonks","name","setName","pending","setPending","complete","setComplete","isRegistered","setIsRegistered","isClicked","setIsClicked","input","document","querySelector","nameInput","contractAddress","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","provider","ethers","providers","Web3Provider","signer","getSigner","honkPortalContract","Contract","getHasNickname","getNickname","nickname","substr","connectWallet","alert","hasNickname","getAllHonks","honks","honksCleaned","honk","honker","toLowerCase","push","address","timestamp","Date","message","value","getTotalHonks","count","toNumber","gasLimit","honkTxn","hash","wait","setTimeout","register","changeNickname","changeTxn","registerNickname","registerTxn","useEffect","src","profileImg","onClick","type","placeholder","onKeyPress","e","key","reverse","map","index","feedShownDate","date","someDate","today","getDate","getMonth","getFullYear","isToday","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c9b47997.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.1bc6ff0a.png\";","import React from \"react\";\n\nconst Pending = () => {\n  return (\n    <container className=\"pending\">\n      <span className=\"spin\"></span>\n      <span className=\"pending__text\">Transaction Pending...</span>\n    </container>\n  );\n};\n\nexport default Pending;\n","import React from \"react\";\n\nconst Complete = () => {\n  return (\n    <container className=\"complete\">\n      <span className=\"pending__text\">✅ㅤTransaction Complete!</span>\n    </container>\n  );\n};\n\nexport default Complete;\n","import { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport abi from \"./utils/HonkPortal.json\";\nimport Pending from \"./Pending\";\nimport Complete from \"./Complete\";\nimport profileImg from \"./image/profile.png\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allHonks, setAllHonks] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [pending, setPending] = useState(false);\n  const [complete, setComplete] = useState(false);\n  const [isRegistered, setIsRegistered] = useState();\n  const [isClicked, setIsClicked] = useState(false);\n\n  const input = document.querySelector(\".textbox\");\n  const nameInput = document.querySelector(\".nameBox\");\n  const contractAddress = \"0x74Cf0e36f5A757Ce4bA68425bc4d74DE145A54e8\";\n  const contractABI = abi.abi;\n\n  const onEnter = (e) => {\n    if (e.key === \"Enter\") {\n      honk();\n    }\n  };\n\n  const onNameEnter = (e) => {\n    if (e.key === \"Enter\") {\n      register();\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account: \", account);\n        setCurrentAccount(account);\n\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const honkPortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        let nickname;\n        const hasNickname = await honkPortalContract.getHasNickname(account);\n\n        if (hasNickname) {\n          nickname = await honkPortalContract.getNickname(account);\n          setName(nickname);\n          setIsRegistered(true);\n        } else {\n          setName(account.substr(0, 6) + \"...\");\n          setIsRegistered(false);\n        }\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const honkPortalContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      );\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      let nickname;\n      const hasNickname = await honkPortalContract.getHasNickname(accounts[0]);\n      console.log(hasNickname);\n\n      if (hasNickname) {\n        nickname = await honkPortalContract.getNickname(accounts[0]);\n        setName(nickname);\n        setIsRegistered(true);\n      } else {\n        setName(accounts[0].substr(0, 6) + \"...\");\n        setIsRegistered(false);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getAllHonks = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const honkPortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        const honks = await honkPortalContract.getAllHonks();\n\n        let honksCleaned = [];\n\n        for (let honk of honks) {\n          let nickname;\n          const hasNickname = await honkPortalContract.getHasNickname(\n            honk.honker\n          );\n          if (hasNickname) {\n            nickname = await honkPortalContract.getNickname(honk.honker);\n          } else {\n            nickname = honk.honker.substr(0, 6).toLowerCase() + \"...\";\n          }\n\n          honksCleaned.push({\n            address: nickname,\n            timestamp: new Date(honk.timestamp * 1000),\n            message: honk.message,\n          });\n        }\n\n        setAllHonks(honksCleaned);\n      } else {\n        console.log(\"Etherum object doesn't exist.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const honk = async () => {\n    try {\n      let message = input.value;\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const honkPortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        let count = await honkPortalContract.getTotalHonks();\n        console.log(\"Retrived total honk count...\", count.toNumber());\n\n        const honkTxn = await honkPortalContract.honk(message, {\n          gasLimit: 300000,\n        });\n        setPending(true);\n        console.log(\"Mining...\", honkTxn.hash);\n\n        input.value = \"\";\n        await honkTxn.wait();\n        setPending(false);\n        setComplete(true);\n        setTimeout(() => setComplete(false), 3000);\n        console.log(\"Mined -- \", honkTxn.hash);\n\n        count = await honkPortalContract.getTotalHonks();\n        console.log(\"Retrived total honk count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const register = async () => {\n    try {\n      let nickname = nameInput.value;\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const honkPortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        if (isRegistered) {\n          let changeTxn = await honkPortalContract.changeNickname(nickname, {\n            gasLimit: 300000,\n          });\n          console.log(\"Your name is...\", nickname);\n          setPending(true);\n\n          await changeTxn.wait();\n        } else {\n          let registerTxn = await honkPortalContract.registerNickname(\n            nickname,\n            {\n              gasLimit: 300000,\n            }\n          );\n          console.log(\"Your name is...\", nickname);\n          setPending(true);\n\n          await registerTxn.wait();\n        }\n\n        setPending(false);\n        setComplete(true);\n        nameInput.value = \"\";\n        setIsClicked(false);\n        setTimeout(() => setComplete(false), 3000);\n\n        nickname = await honkPortalContract.getNickname(currentAccount);\n        setName(nickname);\n        setIsRegistered(true);\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  getAllHonks();\n\n  const isToday = (someDate) => {\n    const today = new Date();\n    return (\n      someDate.getDate() === today.getDate() &&\n      someDate.getMonth() === today.getMonth() &&\n      someDate.getFullYear() === today.getFullYear()\n    );\n  };\n\n  return (\n    <div className=\"mainContainer\">\n      {currentAccount && (\n        <div className=\"profile\">\n          <div className=\"profile__head\">You are...</div>\n          <img className=\"profile__img\" src={profileImg}></img>\n          <div className=\"profile__nickname\">{name}</div>\n          {!isRegistered && !isClicked && (\n            <button\n              className=\"registerBtn\"\n              onClick={() => {\n                setIsClicked(true);\n              }}\n            >\n              Click to register your own nickname!\n            </button>\n          )}\n          {isRegistered && !isClicked && (\n            <button\n              className=\"changeBtn\"\n              onClick={() => {\n                setIsClicked(true);\n              }}\n            >\n              Click to change your own nickname!\n            </button>\n          )}\n          {isClicked && (\n            <input\n              className=\"nameBox\"\n              type={\"text\"}\n              placeholder={\"Write down your nickname.\"}\n              onKeyPress={onNameEnter}\n            />\n          )}\n        </div>\n      )}\n      <div className=\"dataContainer\">\n        <div className=\"header\">🦢 Honk Honk!</div>\n        <div className=\"bio\">Goose Crossing, KAIST</div>\n        {!currentAccount && (\n          <button className=\"honkButton connectBtn\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n        {currentAccount && (\n          <input\n            className=\"textbox\"\n            type={\"text\"}\n            placeholder={\"Honk with a message!\"}\n            onKeyPress={onEnter}\n          />\n        )}\n        {currentAccount && (\n          <button className=\"honkButton\" onClick={honk}>\n            Click this to honk like a Goose! 🐤\n          </button>\n        )}\n        {allHonks.reverse().map((honk, index) => {\n          const date = honk.timestamp;\n          let feedShownDate;\n\n          if (isToday(date)) feedShownDate = \"오늘\";\n          else {\n            feedShownDate = date.getMonth() + 1 + \"월 \" + date.getDate() + \"일\";\n          }\n\n          return (\n            <div className=\"feed\">\n              <img className=\"feed__profile\" src={profileImg}></img>\n              <div className=\"feed__content\">\n                <div className=\"feed__address\">{honk.address}</div>\n                <div className=\"feed__msg\">{honk.message}</div>\n                <div className=\"feed__time\">{feedShownDate}</div>\n              </div>\n            </div>\n          );\n        })}\n        {pending && <Pending />}\n        {complete && <Complete />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}